/**
 * 
 */
package edu.sc.csce740.model;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonIOException;
import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;


/**
 * @author brandemr
 *
 */
public class RequirementCheck {
	
	private String name;
	private boolean passed;
	private String gpa;
	private List<Milestone> milestonesRemaining;
	//TODO: remove double milestoneProgress
	private List<String> notes;
	private List<Course> coreCoursesRemaining;
	private List<Course> coursesTaken;
	private boolean withinTime;
	
	
	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @return the passed
	 */
	public boolean isPassed() {
		return passed;
	}

	/**
	 * @return the gpa
	 */
	public String getGpa() {
		return gpa;
	}

	/**
	 * @return the milestonesRemaining
	 */
	public List<Milestone> getMilestonesRemaining() {
		return milestonesRemaining;
	}

	/**
	 * @return the notes
	 */
	public List<String> getNotes() {
		return notes;
	}

	/**
	 * @return the coreCoursesRemaining
	 */
	public List<Course> getCoreCoursesRemaining() {
		return coreCoursesRemaining;
	}

	/**
	 * @return the coursesTaken
	 */
	public List<Course> getCoursesTaken() {
		return coursesTaken;
	}

	/**
	 * @return the withinTime
	 */
	public boolean isWithinTime() {
		return withinTime;
	}

	private File getFile(String fileName) {
		//Get file from resources folder
		ClassLoader classLoader = getClass().getClassLoader();
		File file = new File(classLoader.getResource(fileName).getFile());
		return file;
	}
	
	public List<RequirementCheckResults> generateResults(StudentRecord record){
		
		milestonesRemaining = getRemainingMilestones(record);
		gpa = calculateGPA(record);
		withinTime = isWithinTime(record);
		coreCoursesRemaining = getRemainingCourses(record);
		notes = getNotes(record);
		
		List<RequirementCheckResults> requirementCheckResults= new RequirementCheckResults();
		Details gpaDetails = new Details();
		gpaDetails.setGpa(Double.parseDouble(gpa));
		gpaDetails.setNotes(notes);
		
		
		return requirementCheckResults;
	}
	
	
	public DegreeRequirements getDegreeRequirements(String degreeName){
		List<DegreeRequirements> degreeRequirements = null;
		
		try{
			switch(degreeName){
			case "PHD": 
						degreeRequirements = new Gson().fromJson(new FileReader(getFile("resources/degreeRequirements.txt")),
						new TypeToken<List<DoctorOfPhilosophy>>() {}.getType());
						return degreeRequirements.get(3);
			case "MS":
						degreeRequirements = new Gson().fromJson(new FileReader(getFile("resources/degreeRequirements.txt")),
						new TypeToken<List<MasterOfScience>>() {
						}.getType());
						return degreeRequirements.get(2);
			case "MSE":	
						degreeRequirements = new Gson().fromJson(new FileReader(getFile("resources/degreeRequirements.txt")),
						new TypeToken<List<MasterOfSoftwareEngineering>>() {
						}.getType());
						return degreeRequirements.get(1);
			case "ME":
						degreeRequirements = new Gson().fromJson(new FileReader(getFile("resources/degreeRequirements.txt")),
						new TypeToken<List<MasterOfEngineering>>() {
						}.getType());
						return degreeRequirements.get(0);
			case "CC":
						degreeRequirements = new Gson().fromJson(new FileReader(getFile("resources/degreeRequirements.txt")),
						new TypeToken<List<SecurityCertificate>>() {
						}.getType());
						return degreeRequirements.get(4);
			default:
						return null;
						
			}			
		} catch (JsonIOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonSyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
	private String calculateGPA(StudentRecord record){
		int totalAttemptedHours = 0;
		int totalPassedHours = 0;
		double qualityPoints = 0.0;
		List<CourseTaken> coursesTaken = record.getCoursesTaken();
		
		for(int i = 0; i < coursesTaken.size(); i++){
			int numOfCredits = Integer.parseInt(coursesTaken.get(i).getCourse().getNumCredits());
			totalAttemptedHours = totalAttemptedHours  + numOfCredits;
			String grade = coursesTaken.get(i).getGrade();
			if (grade.toUpperCase().equals("A")){
				qualityPoints = qualityPoints + numOfCredits * 4;
			} else if (grade.toUpperCase().equals("B")){
				qualityPoints = qualityPoints + numOfCredits * 3;
			} else if (grade.toUpperCase().equals("C")){
				qualityPoints = qualityPoints + numOfCredits * 2;
			} else if (grade.toUpperCase().equals("D")){
				qualityPoints = qualityPoints + numOfCredits * 1;
			} else if (grade.toUpperCase().equals("F")){
				qualityPoints = qualityPoints + numOfCredits * 0;
			} else if (grade.toUpperCase().equals("P")){
				totalAttemptedHours = totalAttemptedHours - numOfCredits;
			} else if (grade.toUpperCase().equals("_")){
				totalAttemptedHours = totalAttemptedHours - numOfCredits;
			}
				
				
		}
		System.out.println(totalAttemptedHours);
		System.out.println(qualityPoints);
		DecimalFormat f = new DecimalFormat("##.00");
		return f.format(qualityPoints / totalAttemptedHours);
	}
	
	private List<Milestone> getRemainingMilestones(StudentRecord record){
		List<Milestone> milestonesRemaining = new ArrayList<Milestone>();
		List<Milestone> milestonesCompleted = record.getMilestonesSet();
		List<String> milestonesCompletedNames = new ArrayList<String>();
		String degreeName = record.getDegreeSought().getDegreeName();
		List<Milestone> allDegreeMilestones = getDegreeRequirements(degreeName).getMilestones();
		
		for(int i = 0; i < milestonesCompleted.size(); i++){
			milestonesCompletedNames.add(milestonesCompleted.get(i).getMilestone());
		}
		for(int i = 0; i < allDegreeMilestones.size(); i++){
			if (!milestonesCompletedNames.contains(allDegreeMilestones.get(i).getMilestone())){
				milestonesRemaining.add(allDegreeMilestones.get(i));
			}
		}
		
		return milestonesRemaining;
	}
	
	private boolean isWithinTime(StudentRecord record){
		int currentSemester;
		int yearBegan = record.getTermBegan().getYear();
		String semesterBegan = record.getTermBegan().getSemester();
		int semesterBeganCode = 0;
		Calendar c = Calendar.getInstance();
		int currentYear = c.get(Calendar.YEAR);
		int currentMonth = c.get(Calendar.MONTH) + 1;
		String degreeSought = record.getDegreeSought().getDegreeName();


		if(currentMonth > 0 && currentMonth < 5){
			//Spring
			currentSemester = 1;
		} else if (currentMonth > 7 && currentMonth < 13){
			//Fall
			currentSemester = 2;
		} else {
			//Summer
			currentSemester = 3; 
		}
		
		if(semesterBegan == "SPRING"){
			semesterBeganCode = 1;
		} else if (semesterBegan == "FALL"){
			semesterBeganCode = 2;
		} else {
			semesterBeganCode = 3;
		}
		
		if (degreeSought.equals("PHD")){		
			if((currentYear - yearBegan) < 10){
				return true;
			} else if ((currentYear - yearBegan) == 10){
				if(currentSemester >= semesterBeganCode){
					return true;
				} else{
					return false;
				}
			} else {
				return false;
			}
		} else {
			if((currentYear - yearBegan) < 6){
				return true;
			} else if ((currentYear - yearBegan) == 6){
				if(currentSemester >= semesterBeganCode){
					return true;
				} else{
					return false;
				}
			} else {
				return false;
			}
		}
//		System.out.println(currentYear + " hhhhhhhhh: " + currentMonth);
	}
	
	private boolean calcPassed(RequirementCheck check){
		return false;
	}
	
	private List<Course> getRemainingCourses(StudentRecord record){
		DegreeRequirements  degreeRequirements = getDegreeRequirements(record.getDegreeSought().getDegreeName());
		List<Course> coursesRemaining = new ArrayList<Course>();
		List<Course> coreCourses = degreeRequirements.getCoreCourses();
		List<CourseTaken> coursesCompleted = record.getCoursesTaken();		
		List<String> coursesCompletedIDs = new ArrayList<String>();
		
		
		for(int i = 0; i < coursesCompleted.size(); i++){
			coursesCompletedIDs.add(coursesCompleted.get(i).getCourse().getId());
		}
		for(int i = 0; i < coreCourses.size(); i++){
			if (!coursesCompletedIDs.contains(coreCourses.get(i).getCourse().getId())){
				coursesRemaining.add(coreCourses.get(i));
			}
		}
		return coursesRemaining;
	}
	
	private boolean clearProgress(String userID){
		return false;
	}

	/**
	 * @return the notes
	 */
	private List<String> getNotes(StudentRecord record) {
		return record.getNotes();
	}
}
