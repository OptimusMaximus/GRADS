/**
 * 
 */
package edu.sc.csce740.model;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonIOException;
import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;


/**
 * @author brandemr
 *
 */
public class RequirementCheck {
	
	private String name;
	private boolean passed;
	private String gpa;
	private List<Milestone> milestonesRemaining;
	//TODO: remove double milestoneProgress
	private List<String> notes;
	private List<Course> coreCoursesRemaining;
	private List<Course> coursesTaken;
	
	
	private File getFile(String fileName) {
		//Get file from resources folder
		ClassLoader classLoader = getClass().getClassLoader();
		File file = new File(classLoader.getResource(fileName).getFile());
		return file;
	}
	
	public RequirementCheck generateResults(StudentRecord record){
		System.out.println(getRemainingMilestones(record).get(0).getMilestone());
		gpa = calculateGPA(record);
		getTimeRemaining(record);
		
		return null;
	}
	
	
	public DegreeRequirements getDegreeRequirements(String degreeName){
		List<DegreeRequirements> degreeRequirements = null;
		
		try{
			switch(degreeName){
			case "PHD": 
						degreeRequirements = new Gson().fromJson(new FileReader(getFile("resources/degreeRequirements.txt")),
						new TypeToken<List<DoctorOfPhilosophy>>() {}.getType());
						return degreeRequirements.get(3);
			case "MS":
						degreeRequirements = new Gson().fromJson(new FileReader(getFile("resources/degreeRequirements.txt")),
						new TypeToken<List<MasterOfScience>>() {
						}.getType());
						return degreeRequirements.get(2);
			case "MSE":	
						degreeRequirements = new Gson().fromJson(new FileReader(getFile("resources/degreeRequirements.txt")),
						new TypeToken<List<MasterOfSoftwareEngineering>>() {
						}.getType());
						return degreeRequirements.get(1);
			case "ME":
						degreeRequirements = new Gson().fromJson(new FileReader(getFile("resources/degreeRequirements.txt")),
						new TypeToken<List<MasterOfEngineering>>() {
						}.getType());
						return degreeRequirements.get(0);
			case "CC":
						degreeRequirements = new Gson().fromJson(new FileReader(getFile("resources/degreeRequirements.txt")),
						new TypeToken<List<SecurityCertificate>>() {
						}.getType());
						return degreeRequirements.get(4);
			default:
						return null;
						
			}			
		} catch (JsonIOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JsonSyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
	private String calculateGPA(StudentRecord record){
		int totalAttemptedHours = 0;
		int totalPassedHours = 0;
		double qualityPoints = 0.0;
		List<CourseTaken> coursesTaken = record.getCoursesTaken();
		
		for(int i = 0; i < coursesTaken.size(); i++){
			int numOfCredits = Integer.parseInt(coursesTaken.get(i).getCourse().getNumCredits());
			totalAttemptedHours = totalAttemptedHours  + numOfCredits;
			String grade = coursesTaken.get(i).getGrade();
			if (grade.toUpperCase().equals("A")){
				qualityPoints = qualityPoints + numOfCredits * 4;
			} else if (grade.toUpperCase().equals("B")){
				qualityPoints = qualityPoints + numOfCredits * 3;
			} else if (grade.toUpperCase().equals("B+")){
				qualityPoints = qualityPoints + numOfCredits * 3.5;
			} else if (grade.toUpperCase().equals("C")){
				qualityPoints = qualityPoints + numOfCredits * 2;
			} else if (grade.toUpperCase().equals("D")){
				qualityPoints = qualityPoints + numOfCredits * 1;
			} else if (grade.toUpperCase().equals("F")){
				qualityPoints = qualityPoints + numOfCredits * 0;
			} else if (grade.toUpperCase().equals("P")){
				totalAttemptedHours = totalAttemptedHours - numOfCredits;
			} else if (grade.toUpperCase().equals("_")){
				totalAttemptedHours = totalAttemptedHours - numOfCredits;
			}
				
				
		}
		System.out.println(totalAttemptedHours);
		System.out.println(qualityPoints);
		DecimalFormat f = new DecimalFormat("##.00");
		return f.format(qualityPoints / totalAttemptedHours);
	}
	
	private List<Milestone> getRemainingMilestones(StudentRecord record){
		List<Milestone> milestonesRemaining = new ArrayList<Milestone>();
		List<Milestone> milestonesCompleted = record.getMilestonesSet();
		List<String> milestonesCompletedNames = new ArrayList<String>();
		String degreeName = record.getDegreeSought().getDegreeName();
		List<Milestone> allDegreeMilestones = getDegreeRequirements(degreeName).getMilestones();
		
		for(int i = 0; i < milestonesCompleted.size(); i++){
			milestonesCompletedNames.add(milestonesCompleted.get(i).getMilestone());
		}
		for(int i = 0; i < allDegreeMilestones.size(); i++){
			if (!milestonesCompletedNames.contains(allDegreeMilestones.get(i).getMilestone())){
				milestonesRemaining.add(allDegreeMilestones.get(i));
//				System.out.println("hhhhhhhhh: " + allDegreeMilestones.get(i).getMilestone());
			}
		}
		
		return milestonesRemaining;
	}
	
	private double getTimeRemaining(StudentRecord record){
		String semester = record.getTermBegan().getSemester();
		int year = record.getTermBegan().getYear();
		Calendar c = Calendar.getInstance();
		int currentYear = c.get(Calendar.YEAR);
		int currentMonth = c.get(Calendar.MONTH) + 1 ;

		System.out.println(currentYear + " hhhhhhhhh: " + Calendar.MONTH);
		return 0.0;
	}
	
	private boolean calcPassed(RequirementCheck check){
		return false;
	}
	
	private List<Course> getRemainingCourses(StudentRecord record){
		return null;
	}
	
	private boolean clearProgress(String userID){
		return false;
	}
}
